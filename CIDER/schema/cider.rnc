start = (collection | series | item | recordContext | location)

required = notAllowed

object =
  attribute number { number },
  # TO DO: This causes a libxml2 error:
  # attribute parent { number? }?,  
  attribute parent { number | empty }?,
  ( element title { line } | required )

collection = element collection {
  object,
  element bulkDate { dateRange? }?,
  element scope { multiline? }?,
  element organization { multiline? }?,
  element recordContexts {
    element primary { element recordContext { recordID }* }?,
    element secondary { element recordContext { recordID }* }?
  }?,
  element history { multiline? }?,
  ( element documentation { documentation } | required ),
  element processingNotes { multiline? }?,
  element associatedMaterial { element material { line }* }?,
  element notes { multiline? }?,
  # Default language is "eng".
  element languages { element language { lang }* }?,
  element subjects { element subject { line }* }?,
  ( element processingStatus { processingStatus } | required ),
  element permanentURL { url? }?,
  element pid { pid? }?,
  # Default publicationStatus is "draft".
  element publicationStatus { publicationStatus? }?,
  element relationships { relationship* }?,
  auditTrail?
}

series = element series {
  object,
  element bulkDate { dateRange? }?,
  element description { multiline? }?,
  element arrangement { multiline? }?,
  element notes { multiline? }?,
  auditTrail?
}

item = element item {
  object,
  element creators { element creator { name }* }?,
  # Default circa is "false".
  element circa { xsd:boolean? }?,
  # date is temporarily not required, while importing legacy data.
  element date { dateRange? }?,
  # Default restrictions is "none".
  element restrictions { restrictions? }?,
  element accessionNumber { accessionNumber? }?,
  # Default dcType is "Text".
  element dcType { dcType? }?,
  element personalNames { element personalName { name }* }?,
  element corporateNames { element corporateName { name }* }?,
  element topicTerms { element topicTerm { topicTerm }* }?,
  element geographicTerms { element geographicTerm { geographicTerm }* }?,
  element description { multiline? }?,
  element volume { line? }?,
  element issue { line? }?,
  element abstract { multiline? }?,
  element citation { multiline? }?,
  ( element classes { class+ } | required ),
  auditTrail?
}

recordContext = element recordContext {
  attribute recordID { recordID },
  element publicationStatus { publicationStatus? }?,
  ( element nameEntry { line } | required ),
  # Default rcType is "corporateBody".
  element rcType { recordContextType? }?,
  element alternateNames { element name { line }* }?,
  element date { dateRange? }?,
  # Default circa is "false".
  element circa { xsd:boolean? }?,
  # Default ongoing is "false".
  element ongoing { xsd:boolean? }?,
  element abstract { multiline? }?,
  element history { multiline? }?,
  element structureNotes { multiline? }?,
  element context { multiline? }?,
  element sources { element source { line }* }?,
  element function { function? }?,
  element occupations {
    element occupation {
      element titles { element title { line }+ },
      element date { dateRange }
    }*
  }?,
  element relationships { recordContextRelationship* }?,
  auditTrail?
}

location = element location {
  ( element titles { element title { line }+ } | required ),
  element collectionNumbers { element number { number }* }?,
  element seriesNumbers { element number { number }* }?,
  ( attribute locationID { locationID } | required ),
  ( element unitType { unitType } | required )
}

# Item classes

class =
  group
| fileFolder
| container
| boundVolume
| threeDimensionalObject
| audioVisualMedia
| document
| physicalImage
| digitalObject
| browsingObject

group = element group {
  empty
}

fileFolder = element fileFolder {
  element location { locationID },
  element notes { multiline? }?
}

container = element container {
  element location { locationID },
  element format { format? }?,
  element notes { multiline? }?
}

boundVolume = element boundVolume {
  element location { locationID },
  element format { format? }?,
  element notes { multiline? }?,
  element rights { multiline? }?
}

threeDimensionalObject = element threeDimensionalObject {
  element location { locationID },
  element format { format? }?,
  element notes { multiline? }?,
  element rights { multiline? }?
}

audioVisualMedia = element audioVisualMedia {
  element location { locationID },
  element format { format? }?,
  element notes { multiline? }?,
  element rights { multiline? }?
}

document = element document {
  element location { locationID },
  element format { format? }?,
  element dimensions { line? }?,
  element rights { multiline? }?
}

physicalImage = element physicalImage {
  element location { locationID },
  element format { format? }?,
  element dimensions { line? }?,
  element rights { multiline? }?
}

digitalObject = element digitalObject {
  element location { locationID },
  element format { format? }?,
  element pid { pid },
  element permanentURL { url? }?,
  element notes { multiline? }?,
  element rights { multiline? }?,
  element relationships { relationship* }?,
  element checksum { line? }?,
  element fileExtension { fileExtension? }?,
  element originalFilename { line? }?,
  element tableOfContents { multiline? }?,
  element stabilization {
    # TO DO: should some of these be required?
    element by { staff? }?,
    element date { date? }?,
    element procedure { stabilizationProcedure? }?,
    element notes { multiline? }?
  }?,
  element applications {
    # Default checksum application is "Advanced Checksum Verifier"
    element checksum { application? }?,
    # Default mediaImage application is "WinImage"
    element mediaImage { application? }?,
    # Default virusCheck application is "Office Scan"
    element virusCheck { application? }?,
    element other { element application { line }* }?
  }?,
  element fileCreationDate { date? }?
}

browsingObject = element browsingObject {
  element format { format? }?,
  element pid { pid? }?,
  element thumbnailPID { pid? }?,
  element relationships { relationship* }?
}


# Relationships

relationship = element relationship {
  attribute predicate { relationshipPredicate },
  element pid { pid }
}

recordContextRelationship = element relationship {
  attribute type { recordContextRelationshipType },
  element relatedEntity { recordID },
  element date { dateRange? }?
}


# Audit Trail

auditTrail = element auditTrail {
  element create { log },
  ( element update { log }
  | element export { log } )*
}

log = 
  element timestamp { xsd:date | xsd:dateTime },
  element staff { staff }


# Authority Lists

application = line
staff = element firstName { line }, element lastName { line }
fileExtension = line
format = line
function = line
geographicTerm = element term { line }, element note { line }?
name = element name { line }, element note { line }?
topicTerm = element term { line }, element note { line }?


# Controlled Vocabularies

dcType =
  "Collection"
| "Dataset"
| "Event"
| "Image"
| "InteractiveResource"
| "MovingImage"
| "PhysicalObject"
| "Service"
| "Software"
| "Sound"
| "StillImage"
| "Text"

documentation =
  "yes"
| "no"

processingStatus =
  "minimal"
| "partial"
| "restricted"
| "open"

publicationStatus =
  "draft"
| "ready"
| "exported"
| "re-export"

recordContextType =
  "corporateBody"
| "family"
| "person"

recordContextRelationshipType =
  "reportsTo"
| "hasReport"
| "isPartOf"
| "hasPart"
| "isMemberOf"
| "hasMember"
| "isPrecededBy"
| "isFollowedBy"
| "isAssociatedWith"
| "isChildOf"
| "isParentOf"
| "isCousinOf"
| "isSiblingOf"
| "isSpouseOf"
| "isGrandchildOf"
| "isGrandparentOf"

relationshipPredicate =
  "fedora-model:hasModel"
| "rel:isMemberOfCollection"
| "rel:hasDescription"
| "rel:isDependentOf"
| "rel:isConstituentOf"
| "rel:isSubsetOf"
| "rel:isMemberOf"

restrictions =
  "none"
| "20 years"
| "75 years"
| "condition"

stabilizationProcedure =
  "ACC-007"
| "ACC-009"

unitType =
  "1.20 cubic ft."
| "0.55 cubic ft."
| "0.50 cubic ft."
| "0.40 cubic ft."
| "0.25 cubic ft."
| "0.20 cubic ft."
| "Bound volume"
| "Artifact"
| "Audio-visual media"
| "Digital objects"


# Datatypes
# TO DO: constrain these with patterns?

number = line
pid = line
accessionNumber = line
recordID = line
locationID = line

# TO DO: should line and multiline require at least one non-space?

# A line is a non-empty string containing no line separators,
# paragraph separators, or control characters (except tab).
# TO DO: the minLength is redundant because of the + in the pattern,
# but XML::LibXML::RelaxNG seems to admit empty strings without it
line = xsd:string { pattern = "([^\p{Zl}\p{Zp}\p{C}]|\t)+" minLength = "1" }

# A multiline string is non-empty but otherwise unconstrained.
multiline = xsd:string { minLength = "1" }

# A date range is either a single date or a from/to pair.
dateRange = date | ( element from { date }, element to { date } )

# A date is an ISO-8601 date, i.e. YYYY-MM-DD, YYYY-MM, or YYYY.
# TO DO: disallow time zone representations?
date = xsd:date | xsd:gYearMonth | xsd:gYear

# A lang is an ISO 639-2 3-letter language code.
# TO DO: does xsd:language include other 3-letter codes?
lang = xsd:language { length = "3" }

# A url is a uri whose scheme is http or https.
url = xsd:anyURI { pattern = "https?:.*" }
